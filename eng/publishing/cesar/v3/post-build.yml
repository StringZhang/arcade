parameters:
  # When set to true the publishing templates from the repo will be used
  # otherwise Darc add-build-to-channel will be used to trigger the promotion pipeline
  inline: true

  # Only used if inline==false. When set to true will stall the current build until
  # the Promotion Pipeline build finishes. Otherwise, the current build continue 
  # execution concurrently with the promotion build.
  waitPublishingFinish: true

  enableSourceLinkValidation: false
  enableSigningValidation: true
  enableSymbolValidation: false
  enableNugetValidation: true
  publishInstallersAndChecksums: false
  SDLValidationParameters:
    enable: false
    continueOnError: false
    params: ''
    artifactNames: ''
    downloadArtifacts: true

  # These parameters let the user customize the call to sdk-task.ps1 for publishing
  # symbols & general artifacts as well as for signing validation
  symbolPublishingAdditionalParameters: ''
  artifactsPublishingAdditionalParameters: ''
  signingValidationAdditionalParameters: ''
  useBuildManifest: false

  # Which stages should finish execution before post-build stages start
  validateDependsOn:
  - build
  publishDependsOn: 
  - Validate

stages:
- ${{ if ne(parameters.inline, 'true') }}:
  - stage: publish_using_darc
    dependsOn: ${{ parameters.validateDependsOn }}
    displayName: Publish using Darc
    variables:
      - template: common-variables.yml
    jobs:
    - template: setup-maestro-vars.yml

    - job:
      displayName: Publish Using Darc
      dependsOn: setupMaestroVars
      variables:
        - name: BARBuildId
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.BARBuildId'] ]
      pool:
        vmImage: 'windows-2019'
      steps:
        - task: PowerShell@2
          displayName: Publish Using Darc
          inputs:
            filePath: $(Build.SourcesDirectory)/eng/common/post-build/publish-using-darc.ps1
            arguments: -BuildId $(BARBuildId) 
              -AzdoToken '$(publishing-dnceng-devdiv-code-r-build-re)'
              -MaestroToken '$(MaestroApiAccessToken)'
              -WaitPublishingFinish ${{ parameters.waitPublishingFinish }}
              -EnableSourceLinkValidation ${{ parameters.enableSourceLinkValidation }}
              -EnableSigningValidation ${{ parameters.enableSourceLinkValidation }}
              -EnableNugetValidation ${{ parameters.enableSourceLinkValidation }}
              -PublishInstallersAndChecksums ${{ parameters.publishInstallersAndChecksums }}
              -ArtifactsPublishingAdditionalParameters '${{ parameters.artifactsPublishingAdditionalParameters }}'
              -SigningValidationAdditionalParameters '${{ parameters.signingValidationAdditionalParameters }}'

- ${{ if eq(parameters.inline, 'true') }}:
  - stage: Validate
    dependsOn: ${{ parameters.validateDependsOn }}
    displayName: Validate Build Assets
    variables:
      - template: common-variables.yml
    jobs:
    - template: setup-maestro-vars.yml

    - job:
      displayName: Post-build Checks
      dependsOn: setupMaestroVars
      variables:
        - name: TargetChannels
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.TargetChannels'] ]
      pool:
        vmImage: 'windows-2019'
      steps:
        - task: PowerShell@2
          displayName: Maestro Channels Consistency
          inputs:
            filePath: $(Build.SourcesDirectory)/eng/common/post-build/check-channel-consistency.ps1
            arguments: -PromoteToChannels "$(TargetChannels)"

    - job:
      displayName: NuGet Validation
      dependsOn: setupMaestroVars
      condition: eq( ${{ parameters.enableNugetValidation }}, 'true')
      pool:
        vmImage: 'windows-2019'
      variables:
        - name: AzDOProjectName
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
        - name: AzDOPipelineId
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
        - name: AzDOBuildId
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
      steps:
        - task: DownloadBuildArtifacts@0
          displayName: Download Package Artifacts
          inputs:
            buildType: specific
            buildVersionToDownload: specific
            project: $(AzDOProjectName)
            pipeline: $(AzDOPipelineId)
            buildId: $(AzDOBuildId)
            artifactName: PackageArtifacts

        - task: PowerShell@2
          displayName: Validate
          inputs:
            filePath: $(Build.SourcesDirectory)/eng/common/post-build/nuget-validation.ps1
            arguments: -PackagesPath $(Build.ArtifactStagingDirectory)/PackageArtifacts/ 
              -ToolDestinationPath $(Agent.BuildDirectory)/Extract/ 

    - job:
      displayName: Signing Validation
      dependsOn: setupMaestroVars
      condition: eq( ${{ parameters.enableSigningValidation }}, 'true')
      variables:
        - template: common-variables.yml
        - name: AzDOProjectName
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
        - name: AzDOPipelineId
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
        - name: AzDOBuildId
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
      pool:
        vmImage: 'windows-2019'
      steps:
        - ${{ if eq(parameters.useBuildManifest, true) }}:
          - task: DownloadBuildArtifacts@0
            displayName: Download build manifest
            inputs:
              buildType: specific
              buildVersionToDownload: specific
              project: $(AzDOProjectName)
              pipeline: $(AzDOPipelineId)
              buildId: $(AzDOBuildId)
              artifactName: BuildManifests
        - task: DownloadBuildArtifacts@0
          displayName: Download Package Artifacts
          inputs:
            buildType: specific
            buildVersionToDownload: specific
            project: $(AzDOProjectName)
            pipeline: $(AzDOPipelineId)
            buildId: $(AzDOBuildId)
            artifactName: PackageArtifacts

        # This is necessary whenever we want to publish/restore to an AzDO private feed
        # Since sdk-task.ps1 tries to restore packages we need to do this authentication here
        # otherwise it'll complain about accessing a private feed.
        - task: NuGetAuthenticate@0
          displayName: 'Authenticate to AzDO Feeds'

        - task: PowerShell@2
          displayName: Enable cross-org publishing
          inputs:
            filePath: eng\common\enable-cross-org-publishing.ps1
            arguments: -token $(dn-bot-dnceng-artifact-feeds-rw)

        # Signing validation will optionally work with the buildmanifest file which is downloaded from
        # Azure DevOps above.
        - task: PowerShell@2
          displayName: Validate
          inputs:
            filePath: eng\common\sdk-task.ps1
            arguments: -task SigningValidation -restore -msbuildEngine vs
              /p:PackageBasePath='$(Build.ArtifactStagingDirectory)/PackageArtifacts'
              /p:SignCheckExclusionsFile='$(Build.SourcesDirectory)/eng/SignCheckExclusionsFile.txt'
              ${{ parameters.signingValidationAdditionalParameters }}

        - template: ../steps/publish-logs.yml
          parameters:
            StageLabel: 'Validation'
            JobLabel: 'Signing'

    - job:
      displayName: SourceLink Validation
      dependsOn: setupMaestroVars
      condition: eq( ${{ parameters.enableSourceLinkValidation }}, 'true')
      variables:
        - template: common-variables.yml
        - name: AzDOProjectName
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
        - name: AzDOPipelineId
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
        - name: AzDOBuildId
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
      pool:
        vmImage: 'windows-2019'
      steps:
        - task: DownloadBuildArtifacts@0
          displayName: Download Blob Artifacts
          inputs:
            buildType: specific
            buildVersionToDownload: specific
            project: $(AzDOProjectName)
            pipeline: $(AzDOPipelineId)
            buildId: $(AzDOBuildId)
            artifactName: BlobArtifacts

        - task: PowerShell@2
          displayName: Validate
          inputs:
            filePath: $(Build.SourcesDirectory)/eng/common/post-build/sourcelink-validation.ps1
            arguments: -InputPath $(Build.ArtifactStagingDirectory)/BlobArtifacts/ 
              -ExtractPath $(Agent.BuildDirectory)/Extract/ 
              -GHRepoName $(Build.Repository.Name) 
              -GHCommit $(Build.SourceVersion)
              -SourcelinkCliVersion $(SourceLinkCLIVersion)
          continueOnError: true

    - template: /eng/common/templates/job/execute-sdl.yml
      parameters:
        enable: ${{ parameters.SDLValidationParameters.enable }}
        dependsOn: setupMaestroVars
        additionalParameters: ${{ parameters.SDLValidationParameters.params }}
        continueOnError: ${{ parameters.SDLValidationParameters.continueOnError }}
        artifactNames: ${{ parameters.SDLValidationParameters.artifactNames }}
        downloadArtifacts: ${{ parameters.SDLValidationParameters.downloadArtifacts }}

  - stage: publish
    dependsOn: ${{ parameters.publishDependsOn }}
    variables:
      - template: common-variables.yml
    displayName: Publishing
    jobs:
    - template: setup-maestro-vars.yml

    - job: publish_symbols
      displayName: Symbols Publishing
      dependsOn: setupMaestroVars
      variables:
        - group: DotNet-Symbol-Server-Pats
        - name: AzDOProjectName
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
        - name: AzDOPipelineId
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
        - name: AzDOBuildId
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
      pool:
        vmImage: 'windows-2019'
      steps:
        - task: DownloadBuildArtifacts@0
          displayName: Download Build Assets
          continueOnError: true
          inputs:
            buildType: specific
            buildVersionToDownload: specific
            project: $(AzDOProjectName)
            pipeline: $(AzDOPipelineId)
            buildId: $(AzDOBuildId)
            downloadType: 'specific'
            itemPattern: |
              PdbArtifacts/**
              BlobArtifacts/**
            downloadPath: '$(Build.ArtifactStagingDirectory)'
            
        # This is necessary whenever we want to publish/restore to an AzDO private feed
        # Since sdk-task.ps1 tries to restore packages we need to do this authentication here
        # otherwise it'll complain about accessing a private feed.
        - task: NuGetAuthenticate@0
          displayName: 'Authenticate to AzDO Feeds'

        - task: PowerShell@2
          displayName: Enable cross-org publishing
          inputs:
            filePath: eng\common\enable-cross-org-publishing.ps1
            arguments: -token $(dn-bot-dnceng-artifact-feeds-rw)

        - task: PowerShell@2
          displayName: Publish
          inputs:
            filePath: eng\common\sdk-task.ps1
            arguments: -task PublishToSymbolServers -restore -msbuildEngine dotnet
              /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
              /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
              /p:PDBArtifactsDirectory='$(Build.ArtifactStagingDirectory)/PDBArtifacts/'
              /p:BlobBasePath='$(Build.ArtifactStagingDirectory)/BlobArtifacts/'
              /p:SymbolPublishingExclusionsFile='$(Build.SourcesDirectory)/eng/SymbolPublishingExclusionsFile.txt'
              /p:Configuration=Release
              /p:PublishToMSDL=false
              ${{ parameters.symbolPublishingAdditionalParameters }}

        - template: ../steps/publish-logs.yml
          parameters:
            StageLabel: '${{ parameters.stageName }}'
            JobLabel: 'SymbolPublishing'

    - job: publish_assets
      displayName: Publish Assets
      dependsOn: setupMaestroVars
      timeoutInMinutes: 120
      variables:
        - name: BARBuildId
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.BARBuildId'] ]
        - name: IsStableBuild
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.IsStableBuild'] ]
        - name: AzDOProjectName
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
        - name: AzDOPipelineId
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
        - name: AzDOBuildId
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
        - name: ArtifactsCategory
          value: ${{ coalesce(variables._DotNetArtifactsCategory, '.NETCore') }}
      pool:
        vmImage: 'windows-2019'
      steps:
        - task: DownloadBuildArtifacts@0
          displayName: Download Build Assets
          continueOnError: true
          inputs:
            buildType: specific
            buildVersionToDownload: specific
            project: $(AzDOProjectName)
            pipeline: $(AzDOPipelineId)
            buildId: $(AzDOBuildId)
            downloadType: 'specific'
            itemPattern: |
              PackageArtifacts/**
              BlobArtifacts/**
              AssetManifests/**
            downloadPath: '$(Build.ArtifactStagingDirectory)'

        - task: NuGetToolInstaller@1
          displayName: 'Install NuGet.exe'

        # This is necessary whenever we want to publish/restore to an AzDO private feed
        - task: NuGetAuthenticate@0
          displayName: 'Authenticate to AzDO Feeds'

        - task: PowerShell@2
          displayName: Enable cross-org publishing
          inputs:
            filePath: eng\common\enable-cross-org-publishing.ps1
            arguments: -token $(dn-bot-dnceng-artifact-feeds-rw)

        - task: PowerShell@2
          displayName: Packages & Blobs Publishing
          inputs:
            filePath: eng\common\sdk-task.ps1
            arguments: -task PublishArtifactsInManifest -restore -msbuildEngine dotnet
              /p:BARBuildId=$(BARBuildId)
              /p:TargetChannels='$(TargetChannels)'
              /p:ArtifactsCategory=$(ArtifactsCategory)
              /p:IsInternalBuild=$(IsInternalBuild)
              /p:NugetPath=$(NuGetExeToolPath)
              /p:MaestroApiEndpoint='$(MaestroApiEndPoint)'
              /p:BuildAssetRegistryToken='$(MaestroApiAccessToken)'
              /p:ManifestsBasePath='$(Build.ArtifactStagingDirectory)/AssetManifests/'
              /p:BlobBasePath='$(Build.ArtifactStagingDirectory)/BlobArtifacts/'
              /p:PackageBasePath='$(Build.ArtifactStagingDirectory)/PackageArtifacts/'
              /p:PublishInstallersAndChecksums=${{ parameters.publishInstallersAndChecksums }}
              /p:InstallersAzureAccountKey=$(dotnetcli-storage-key)
              /p:InternalInstallersAzureAccountKey=$(dotnetclimsrc-storage-key)
              /p:ChecksumsAzureAccountKey=$(dotnetclichecksums-storage-key)
              /p:InternalChecksumsAzureAccountKey=$(dotnetclichecksumsmsrc-access-key)
              /p:AzureStorageTargetFeedKey='$(dotnetfeed-storage-access-key-1)'
              /p:AzureDevOpsFeedsKey='$(dn-bot-dnceng-artifact-feeds-rw)'
              /p:AkaMSClientId=$(akams-client-id)
              /p:AkaMSClientSecret=$(akams-client-secret)
              ${{ parameters.artifactsPublishingAdditionalParameters }}

        - template: ../steps/publish-logs.yml
          parameters:
            StageLabel: '${{ parameters.stageName }}'
            JobLabel: 'AssetsPublishing'
